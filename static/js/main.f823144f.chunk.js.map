{"version":3,"sources":["news.js","components/Article.js","components/Scrollable.js","components/Bar.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["url","getNews","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","page","currentTime","updatedURL","result","wrap","_context","prev","next","concat","fetch","then","response","json","sent","abrupt","stop","_x","_x2","apply","this","arguments","styles","card","maxWidth","border","padding","marginBottom","media","height","Article","_this$props","props","title","description","publishedAt","source","urlToImage","time","moment","now","fromNow","react_default","createElement","index_es","style","image","gutterBottom","variant","component","size","color","name","PureComponent","scrollable","WrappedComponent","_Component","HOC","_getPrototypeOf2","_this","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","onScroll","articles","isLoading","fetchNews","errors","window","innerHeight","scrollY","document","body","offsetHeight","loadingErrorMsg","inherits","createClass","key","value","addEventListener","removeEventListener","Component","root","flexGrow","grow","label","Bar","autoRefresh","handleChange","position","control","checked","onChange","aria-label","React","display","marginTop","map","article","components_Article","assign","App","state","isRefreshing","pullUpdates","puller","setInterval","handlefetchNews","Date","toISOString","event","setState","target","clearTimeout","data","message","code","toConsumableArray","refreshErrorMsg","catch","_this$state","Fragment","components_Bar","margin","textAlign","components_List","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAAMA,EACJ,qFAEWC,EAAO,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAMC,GAAb,IAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjBL,EADiB,GAAAM,OACDjB,EADC,UAAAiB,OACWR,GAC5BC,IAAaC,EAAU,GAAAM,OAAMjB,EAAN,UAAAiB,OAAkBP,IAFxBI,EAAAE,KAAA,EAGAE,MAAMP,GAAYQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH5C,cAGfT,EAHeE,EAAAQ,KAAAR,EAAAS,OAAA,SAIdX,GAJc,wBAAAE,EAAAU,SAAAhB,MAAH,gBAAAiB,EAAAC,GAAA,OAAAxB,EAAAyB,MAAAC,KAAAC,YAAA,oBCSdC,EAAS,CACbC,KAAM,CACJC,SAAU,IACVC,OAAQ,oBACRC,QAAS,GACTC,aAAc,IAEhBC,MAAO,CACLC,OAAQ,MAoCGC,mLA/BJ,IAAAC,EACyDX,KAAKY,MAA7DC,EADDF,EACCE,MAAOC,EADRH,EACQG,YAAaC,EADrBJ,EACqBI,YAAaC,EADlCL,EACkCK,OAAQC,EAD1CN,EAC0CM,WAE3CC,EAAOC,IAAOJ,GAAeI,IAAOC,OAAOC,UAEjD,OACEC,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAMC,MAAOvB,EAAOC,MAClBmB,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,KACGP,GACCK,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAWC,MAAOvB,EAAOM,MAAOkB,MAAOT,EAAYJ,MAAOA,IAE5DS,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,KACEF,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAYG,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7ChB,GAEHS,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAYK,UAAU,KAAKf,KAG/BQ,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,KACEF,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAQM,KAAK,QAAQC,MAAM,WACxBf,GAAUA,EAAOgB,MAEpBV,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAQM,KAAK,QAAQC,MAAM,WACxBb,YAxBSe,iBCQPC,EA9BI,SAAAC,GA2BjB,OA3BqC,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAAhE,OAAAiE,EAAA,EAAAjE,CAAAyB,KAAAqC,GAAA,QAAAI,EAAAxC,UAAAyC,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAA5C,UAAA4C,GAAA,OAAAN,EAAAhE,OAAAuE,EAAA,EAAAvE,CAAAyB,MAAAsC,EAAA/D,OAAAwE,EAAA,EAAAxE,CAAA8D,IAAAW,KAAAjD,MAAAuC,EAAA,CAAAtC,MAAAX,OAAAsD,MAUnCM,SAAW,WAAM,IAAAtC,EACoC4B,EAAK3B,MAAhDsC,EADOvC,EACPuC,SAAUC,EADHxC,EACGwC,UAAWC,EADdzC,EACcyC,UAAWC,EADzB1C,EACyB0C,SAEtCC,OAAOC,YAAcD,OAAOE,SAC1BC,SAASC,KAAKC,aAAe,KAC/BT,EAASR,SACRS,GACCE,GAAUA,EAAOO,iBAEnBR,GAAU,GAAM,IAnBeb,EAAA,OAAAhE,OAAAsF,EAAA,EAAAtF,CAAA8D,EAAAD,GAAA7D,OAAAuF,EAAA,EAAAvF,CAAA8D,EAAA,EAAA0B,IAAA,oBAAAC,MAAA,WAGjCV,OAAOW,iBAAiB,SAAUjE,KAAKiD,UAAU,KAHhB,CAAAc,IAAA,uBAAAC,MAAA,WAOjCV,OAAOY,oBAAoB,SAAUlE,KAAKiD,UAAU,KAPnB,CAAAc,IAAA,SAAAC,MAAA,WAuBjC,OAAO1C,EAAA5C,EAAA6C,cAACY,EAAqBnC,KAAKY,WAvBDyB,EAAA,CACnB8B,cCOdjE,EAAS,CACbkE,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,MAAO,CACLxC,MAAO,SAsCIyC,mLAjCJ,IAAA7D,EAC+BX,KAAKY,MAAnC6D,EADD9D,EACC8D,YAAaC,EADd/D,EACc+D,aAErB,OACEpD,EAAA5C,EAAA6C,cAAA,OAAKE,MAAOvB,EAAOkE,MACjB9C,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAQmD,SAAS,UACfrD,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,KACEF,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CAAYI,QAAQ,KAAKG,MAAM,UAAUN,MAAOvB,EAAOoE,MAAvD,eAGAhD,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,KACEF,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CACEoD,QACEtD,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,CACEqD,QAASJ,EACTK,SAAUJ,EACVK,aAAW,kBAGfR,MACEjD,EAAA5C,EAAA6C,cAAA,OAAKE,MAAO,CAAEM,MAAO,SAArB,gBAAA1C,OACmBoF,EAAc,KAAO,qBAtBxCO,IAAMb,WCXTjC,IARF,SAAA5D,GAAA,IAAG4E,EAAH5E,EAAG4E,SAAH,OACX5B,EAAA5C,EAAA6C,cAAA,OAAKE,MAAO,CAAEwD,QAAS,eAAgBC,UAAW,KAC/ChC,EAASiC,IAAI,SAAAC,GAAO,OACnB9D,EAAA5C,EAAA6C,cAAC8D,EAAD9G,OAAA+G,OAAA,GAAaF,EAAb,CAAsBrB,IAAKqB,EAAQhH,YCqG1BmH,6MApGbC,MAAQ,CACNtC,SAAU,GACVuC,cAAc,EACdtC,WAAW,EACXtE,KAAM,EACNC,YAAa,GACb2F,aAAa,EACbpB,OAAQ,MAQVqC,YAAc,WACZnD,EAAKoD,OAASC,YACZ,kBAAMrD,EAAKsD,iBAAgB,GAAO,GAAM,IAAIC,MAAOC,gBACnD,QAIJrB,aAAe,SAAAsB,GACbzD,EAAK0D,SAAS,CAAExB,YAAauB,EAAME,OAAOrB,UACtCmB,EAAME,OAAOrB,QAAStC,EAAKmD,cAC1BS,aAAa5D,EAAKoD,WAOzBvC,UAAY,SAAAtE,GACVT,EAAQkE,EAAKiD,MAAM3G,KAAMC,GACtBS,KAAK,SAAA6G,GACJ,IAAIZ,EAAQ,CACVC,cAAc,EACdtC,WAAW,GAELD,EAA4BkD,EAA5BlD,SAAUmD,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,KACvBpD,GAAYA,EAASR,OAAS,EAC5B5D,GACF0G,EAAM1G,YAAcA,EACpB0G,EAAMtC,SAAN,GAAA7D,OAAAd,OAAAgI,EAAA,EAAAhI,CAAqB2E,GAArB3E,OAAAgI,EAAA,EAAAhI,CAAkCgE,EAAKiD,MAAMtC,aAE7CsC,EAAM3G,KAAO0D,EAAKiD,MAAM3G,KAAO,EAC/B2G,EAAMtC,SAAN,GAAA7D,OAAAd,OAAAgI,EAAA,EAAAhI,CAAqBgE,EAAKiD,MAAMtC,UAAhC3E,OAAAgI,EAAA,EAAAhI,CAA6C2E,KAE7B,0BAAToD,EACTd,EAAMnC,OAAS,CACbO,gBAAiByC,GAEZC,IACPd,EAAMnC,OAAS,CACbmD,gBAAiBH,IAGrB9D,EAAK0D,SAAST,KAEfiB,MAAM,kBAAMlE,EAAK0D,SAAS,CAAER,cAAc,EAAOtC,WAAW,SAGjE0C,gBAAkB,SAAC1C,EAAWsC,EAAc3G,GAC1CyD,EAAK0D,SAAS,CAAE9C,YAAWsC,gBAAgB,kBACzClD,EAAKa,UAAUtE,yFArDjBkB,KAAK6F,iBAAgB,GAAM,GAC3B7F,KAAKwF,MAAMf,aAAezE,KAAK0F,6DAiB/BS,aAAanG,KAAK2F,yCAuCX,IAAAe,EAOH1G,KAAKwF,MALPtC,EAFKwD,EAELxD,SACAC,EAHKuD,EAGLvD,UACAsC,EAJKiB,EAILjB,aACAhB,EALKiC,EAKLjC,YACApB,EANKqD,EAMLrD,OAEF,OACE/B,EAAA5C,EAAA6C,cAACD,EAAA5C,EAAMiI,SAAP,KACErF,EAAA5C,EAAA6C,cAACqF,EAAD,CAAKnC,YAAaA,EAAaC,aAAc1E,KAAK0E,eACjDe,GAAgBnE,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,MACjBF,EAAA5C,EAAA6C,cAAA,OAAKE,MAAO,CAAEM,MAAO,UAAW8E,OAAQ,SACrCxD,GAAUA,EAAOmD,iBAEpBlF,EAAA5C,EAAA6C,cAAA,OAAKE,MAAO,CAAEqF,UAAW,WACvBxF,EAAA5C,EAAA6C,cAACwF,EAAD,CACE7D,SAAUA,EACVE,UAAWpD,KAAK6F,gBAChB1C,UAAWA,EACXE,OAAQA,IAEV/B,EAAA5C,EAAA6C,cAAA,OAAKE,MAAO,CAAEM,MAAO,UAAWxB,aAAc,KAC3C8C,GAAUA,EAAOO,iBAEpBtC,EAAA5C,EAAA6C,cAAA,WAAM4B,GAAa7B,EAAA5C,EAAA6C,cAACC,EAAA,EAAD,gBA9FX2C,aCME6C,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAA5C,EAAA6C,cAAC+F,EAAD,MAAS7D,SAAS8D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnI,KAAK,SAAAoI,GACjCA,EAAaC","file":"static/js/main.f823144f.chunk.js","sourcesContent":["const url =\n  'https://newsapi.org/v2/everything?q=sports&apiKey=79af8a0825ba4443adf9c1f76f8913cb';\n\nexport const getNews = async (page, currentTime) => {\n  let updatedURL = `${url}&page=${page}`;\n  if (currentTime) updatedURL = `${url}&from=${currentTime}`;\n  const result = await fetch(updatedURL).then(response => response.json());\n  return result;\n};\n","import React, { PureComponent } from 'react';\nimport {\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Button,\n  Typography\n} from '@material-ui/core';\nimport moment from 'moment';\n\nconst styles = {\n  card: {\n    maxWidth: 345 * 2,\n    border: '1px solid #3f51b5',\n    padding: 10,\n    marginBottom: 10\n  },\n  media: {\n    height: 140 * 2\n  }\n};\n\nclass Article extends PureComponent {\n  render() {\n    const { title, description, publishedAt, source, urlToImage } = this.props;\n\n    const time = moment(publishedAt || moment.now()).fromNow();\n\n    return (\n      <Card style={styles.card}>\n        <CardActionArea>\n          {urlToImage && (\n            <CardMedia style={styles.media} image={urlToImage} title={title} />\n          )}\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {title}\n            </Typography>\n            <Typography component=\"p\">{description}</Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size=\"small\" color=\"primary\">\n            {source && source.name}\n          </Button>\n          <Button size=\"small\" color=\"primary\">\n            {time}\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default Article;\n","import React, { Component } from 'react';\n\nconst scrollable = WrappedComponent => {\n  class HOC extends Component {\n    componentDidMount() {\n      window.addEventListener('scroll', this.onScroll, false);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('scroll', this.onScroll, false);\n    }\n\n    onScroll = () => {\n      const { articles, isLoading, fetchNews, errors } = this.props;\n      if (\n        window.innerHeight + window.scrollY >=\n          document.body.offsetHeight - 500 &&\n        articles.length &&\n        !isLoading &&\n        !(errors && errors.loadingErrorMsg)\n      )\n        fetchNews(true, false);\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return HOC;\n};\n\nexport default scrollable;\n","import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Switch,\n  FormControlLabel,\n  FormGroup\n} from '@material-ui/core';\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  label: {\n    color: '#fff'\n  }\n};\n\nclass Bar extends React.Component {\n  render() {\n    const { autoRefresh, handleChange } = this.props;\n\n    return (\n      <div style={styles.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" style={styles.grow}>\n              Sports News\n            </Typography>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={autoRefresh}\n                    onChange={handleChange}\n                    aria-label=\"RefreshSwitch\"\n                  />\n                }\n                label={\n                  <div style={{ color: '#fff' }}>\n                    {`Auto Refresh ${autoRefresh ? 'On' : 'Off'}`}\n                  </div>\n                }\n              />\n            </FormGroup>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default Bar;\n","import React from 'react';\nimport { Article, scrollable } from '../components';\n\nconst List = ({ articles }) => (\n  <div style={{ display: 'inline-block', marginTop: 15 }}>\n    {articles.map(article => (\n      <Article {...article} key={article.url} />\n    ))}\n  </div>\n);\n\nexport default scrollable(List);\n","import React, { Component } from 'react';\nimport { CircularProgress, LinearProgress } from '@material-ui/core';\nimport { getNews } from './news';\n\nimport { Bar, List } from './components';\n\nclass App extends Component {\n  state = {\n    articles: [],\n    isRefreshing: false,\n    isLoading: true,\n    page: 1,\n    currentTime: '',\n    autoRefresh: false,\n    errors: {}\n  };\n\n  componentDidMount() {\n    this.handlefetchNews(true, false);\n    this.state.autoRefresh && this.pullUpdates();\n  }\n\n  pullUpdates = () => {\n    this.puller = setInterval(\n      () => this.handlefetchNews(false, true, new Date().toISOString()),\n      60000\n    );\n  };\n\n  handleChange = event => {\n    this.setState({ autoRefresh: event.target.checked });\n    if (event.target.checked) this.pullUpdates();\n    else clearTimeout(this.puller);\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.puller);\n  }\n\n  fetchNews = currentTime => {\n    getNews(this.state.page, currentTime)\n      .then(data => {\n        let state = {\n          isRefreshing: false,\n          isLoading: false\n        };\n        const { articles, message, code } = data;\n        if (articles && articles.length > 0) {\n          if (currentTime) {\n            state.currentTime = currentTime;\n            state.articles = [...articles, ...this.state.articles];\n          } else {\n            state.page = this.state.page + 1;\n            state.articles = [...this.state.articles, ...articles];\n          }\n        } else if (code === 'maximumResultsReached')\n          state.errors = {\n            loadingErrorMsg: message\n          };\n        else if (code) {\n          state.errors = {\n            refreshErrorMsg: message\n          };\n        }\n        this.setState(state);\n      })\n      .catch(() => this.setState({ isRefreshing: false, isLoading: false }));\n  };\n\n  handlefetchNews = (isLoading, isRefreshing, currentTime) => {\n    this.setState({ isLoading, isRefreshing }, () =>\n      this.fetchNews(currentTime)\n    );\n  };\n\n  render() {\n    const {\n      articles,\n      isLoading,\n      isRefreshing,\n      autoRefresh,\n      errors\n    } = this.state;\n    return (\n      <React.Fragment>\n        <Bar autoRefresh={autoRefresh} handleChange={this.handleChange} />\n        {isRefreshing && <LinearProgress />}\n        <div style={{ color: '#ff5252', margin: '10 0' }}>\n          {errors && errors.refreshErrorMsg}\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <List\n            articles={articles}\n            fetchNews={this.handlefetchNews}\n            isLoading={isLoading}\n            errors={errors}\n          />\n          <div style={{ color: '#ff5252', marginBottom: 10 }}>\n            {errors && errors.loadingErrorMsg}\n          </div>\n          <div>{isLoading && <CircularProgress />}</div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}